In 2006, Geoffrey Hinton(father of machine learning) et al. published a paper1 showing how to train a deep neural network capable of recognizing handwritten digits with state-of-the-art precision Tensorflow(developed by google) is a more complex library to perform distributed numerical computations.It was open sourced in November 2015, and version 2.0 was released in September 2019Keras is a high-level Deep Learning API that makes it very simple to train and run neural networks-Machine Learning is great for:Problems for which existing solutions require a lot of fine-tuning or long lists of rules: one Machine Learning algorithm can often simplify code and perform better than the traditional approach.Complex problems for which using a traditional approach yields no good solution: the best Machine Learning techniques can perhaps find a solution.Fluctuating environments: a Machine Learning system can adapt to new data.Getting insights about complex problems and large amounts of data.There are so many different types of Machine Learning systems that it is useful to classify them in broad categories, based on the following criteria:	Whether or not they are trained with HUMAN SUPERVISION (supervised, unsupervised, semisupervised, and Reinforcement Learning)	Whether or not they can learn INCREMENTALLY ON THE FLY (online versus batch learning)	Whether they work by simply comparing new data points to known data points, or instead by detecting patterns in the training data and building a predictive model, much like scientists do (INSTANCE-BASED versus MODEL-BASED learning)LET’S LOOK AT EACH OF THESE CRITERIA A BIT MORE CLOSELY.	Supervised/Unsupervised Learning	Machine Learning systems can be classified according to the amount and type of supervision they get during training. There are four major categories: supervised learning, unsupervised learning, semisupervised learning, and Reinforcement Learning.	Supervised learning		In supervised learning, the training set you feed to the algorithm includes the desired solutions, called labels 		A typical supervised learning task is CLASSIFICATION. The spam filter is a good example of this: it is trained with many example emails along with their class (spam or ham), and it must learn how to classify new emails.		Another typical task is to predict a target numeric value, such as the price of a car, given a set of features (mileage, age, brand, etc.) called predictors. This sort of task is called regression (Figure 1-6).1 To train the system, you need to give it many examples of cars, including both their predictors and their labels (i.e., their prices).		NOTE			In Machine Learning an ATTRIBUTE IS A DATA TYPE (E.G., “MILEAGE”), while a FEATURE HAS SEVERAL MEANINGS, DEPENDING ON THE CONTEXT, BUT GENERALLY MEANS AN ATTRIBUTE PLUS ITS VALUE (E.G., “MILEAGE = 15,000”). MANY PEOPLE USE THE WORDS ATTRIBUTE AND FEATURE INTERCHANGEABLY.		Note that some regression algorithms can be used for CLASSIFICATION as well, and vice versa. For example, Logistic REGRESSION IS COMMONLY USED FOR CLASSIFICATION, as it can output a value that corresponds to the probability of belonging to a given class (e.g., 20% chance of being spam).		Here are some of the most important supervised learning algorithms (covered in this book):			k-Nearest Neighbors			Linear Regression			Logistic Regression			Support Vector Machines (SVMs)			Decision Trees and Random Forests		Neural networks2	Unsupervised learning:		In unsupervised learning, as you might guess, the training data is UNLABELED (FIGURE 1-7). THE SYSTEM TRIES TO LEARN WITHOUT A TEACHER.		Here are some of the most important unsupervised learning algorithms (most of these are covered in Chapters 8 and 9):,Clustering,K-Means,DBSCAN,Hierarchical Cluster Analysis (HCA),Anomaly detection and novelty detection,One-class SVM,Isolation Forest,Visualization and dimensionality reduction,Principal Component Analysis (PCA),Kernel PCA,Locally Linear Embedding (LLE),t-Distributed Stochastic Neighbor Embedding (t-SNE),Association rule learning,Apriori,Eclat				For example, say you have a lot of data about your blog’s visitors. You may want to run a CLUSTERING ALGORITHM to try to detect groups of similar visitors (Figure 1-8). At no point do you tell the algorithm which group a visitor belongs to: it finds those connections without your help. For example, it might notice that 40% of your visitors are males who love comic books and generally read your blog in the evening, while 20% are young sci-fi lovers who visit during the weekends. IF YOU USE A HIERARCHICAL CLUSTERING ALGORITHM, IT MAY ALSO SUBDIVIDE EACH GROUP INTO SMALLER GROUPS. THIS MAY HELP YOU TARGET YOUR POSTS FOR EACH GROUP.		VISUALIZATION ALGORITHMS ARE ALSO GOOD EXAMPLES OF UNSUPERVISED LEARNING ALGORITHMS: you feed them a lot of complex and UNLABELED DATA, and they output a 2D or 3D representation of your data that can easily be plotted (Figure 1-9). These algorithms try to preserve as much structure as they can (e.g., trying to keep SEPARATE CLUSTERS in the input space from overlapping in the visualization) so that you can understand how the data is organized and perhaps identify unsuspected patterns.		A related task is DIMENSIONALITY REDUCTION, IN WHICH THE GOAL IS TO SIMPLIFY THE DATA WITHOUT LOSING TOO MUCH INFORMATION. ONE WAY TO DO THIS IS TO MERGE SEVERAL CORRELATED FEATURES INTO ONE. FOR EXAMPLE, A CAR’S MILEAGE MAY BE STRONGLY CORRELATED WITH ITS AGE, SO THE DIMENSIONALITY REDUCTION ALGORITHM WILL MERGE THEM INTO ONE FEATURE THAT REPRESENTS THE CAR’S WEAR AND TEAR. This is called FEATURE EXTRACTION.		anomaly detection,novelty detection( A very similar task is novelty detection: it aims to detect new instances that look different from all instances in the training set. This requires having a very “clean” training set, devoid of any instance that you would like the algorithm to detect. For example, if you have thousands of pictures of dogs, and 1% of these pictures represent Chihuahuas, then a novelty detection algorithm should not treat new pictures of Chihuahuas as novelties. On the other hand, anomaly detection algorithms may consider these dogs as so rare and so different from other dogs that they would likely classify them as anomalies.),association learning(the goal is to dig into large amounts of data and discover interesting relations between attributes. For example, suppose you own a supermarket. Running an association rule on your sales logs may reveal that people who purchase barbecue sauce and potato chips also tend to buy steak. Thus, you may want to place these items close to one another)	Semisupervised learning:		Since labeling data is usually time-consuming and costly, you will often have plenty of unlabeled instances, and few labeled instances. Some algorithms can deal with data that’s partially labeled. This is called semisupervised learning		ex: google photos-Some photo-hosting services, such as Google Photos, are good examples of this. Once you upload all your family photos to the service, it automatically recognizes that the same person A shows up in photos 1, 5, and 11, while another person B shows up in photos 2, 5, and 7. This is the unsupervised part of the algorithm (clustering). Now all the system needs is for you to tell it who these people are. Just add one label per person4 and it is able to name everyone in every photo, which is useful for searching photos		Most semisupervised learning algorithms are combinations of unsupervised and supervised algorithms. For example, deep belief networks (DBNs) are based on unsupervised components called restricted Boltzmann machines (RBMs) stacked on top of one another. RBMs are trained sequentially in an unsupervised manner, and then the whole system is fine-tuned using supervised learning techniques.		Reinforcement Learning:		"Reinforcement Learning is a very different beast. The learning system, called an AGENT in this context, can observe the environment, select and perform actions, and get rewards in return (or penalties in the form of negative rewards, as shown in Figure 1-12). It must then learn by itself what is the best strategy, called a POLICY, to get the most reward over time. A policy defines what action the agent should choose when it is in a given situation."		For example, many robots implement Reinforcement Learning algorithms to learn how to walk. DeepMind’s AlphaGo program is also a good example of Reinforcement Learning: it made the headlines in May 2017 when it beat the world champion Ke Jie at the game of Go. It learned its winning policy by analyzing millions of games, and then playing many games against itself. Note that learning was turned off during the games against the champion; AlphaGo was just applying the policy it had learned.Batch and Online Learning:	Another criterion used to classify Machine Learning systems is whether or not the system can learn incrementally from a stream of incoming data.	Batch learning		"IN BATCH LEARNING, THE SYSTEM IS INCAPABLE OF LEARNING INCREMENTALLY: it must be trained using all the available data. This will generally take a lot of time and computing resources, so it is typically done offline. First the system is trained, and then it is launched into production and runs without learning anymore; it just applies what it has learned. This is called OFFLINE LEARNING."		"If you want a batch learning system to know about new data (such as a new type of spam), you need to train a new version of the system from scratch on the full dataset (not just the new data, but also the old data), then stop the old system and replace it with the new one."		Fortunately, the whole process of training, evaluating, and launching a Machine Learning system can be automated fairly easily (as shown in Figure 1-3), so even a batch learning system can adapt to change. Simply update the data and train a new version of the system from scratch as often as needed		This solution is simple and often works fine, but training using the full set of data can take many hours, so you would typically train a new system only every 24 hours or even just weekly. If your system needs to adapt to rapidly changing data (e.g., to predict stock prices), then you need a more reactive solution.		Also, training on the full set of data requires a lot of computing resources (CPU, memory space, disk space, disk I/O, network I/O, etc.). If you have a lot of data and you automate your system to train from scratch every day, it will end up costing you a lot of money. If the amount of data is huge, it may even be impossible to use a batch learning algorithm.		Finally, if your system needs to be able to learn autonomously and it has limited resources (e.g., a smartphone application or a rover on Mars), then carrying around large amounts of training data and taking up a lot of resources to train for hours every day is a showstopper.		"Fortunately, a better option in all these cases is to use algorithms that are capable of learning incrementally."	Online learning		In online learning, you train the system incrementally by feeding it data instances sequentially, either individually or in small groups called mini-batches. Each learning step is fast and cheap, so the system can learn about new data on the fly, as it arrives (see Figure 1-13).		Online learning is great for systems that receive data as a continuous flow (e.g., stock prices) and need to adapt to change rapidly or autonomously. "It is also a good option if you have limited computing resources: once an online learning system has learned about new data instances, it does not need them anymore, so you can discard them (unless you want to be able to roll back to a previous state and “replay” the data)." This can save a huge amount of space.		Online learning algorithms can also be used to train systems on huge datasets that cannot fit in one machine’s main memory (this is called OUT-OF-CORE LEARNING). The algorithm loads part of the data, runs a training step on that data, and repeats the process until it has run on all of the data (see Figure 1-14).		WARNING			Out-of-core learning is usually done offline (i.e., not on the live system), so online learning can be a confusing name. Think of it as INCREMENTAL LEARNING.		One important parameter of online learning systems is how fast they should adapt to changing data: this is called the LEARNING RATE. If you set a high learning rate, then your system will rapidly adapt to new data, but it will also tend to quickly forget the old data (you don’t want a spam filter to flag only the latest kinds of spam it was shown). Conversely, if you set a low learning rate, the system will have more inertia; that is, it will learn more slowly, but it will also be less sensitive to noise in the new data or to sequences of nonrepresentative data points (outliers).		A big challenge with online learning is that if bad data is fed to the system, the system’s performance will gradually decline. If it’s a live system, your clients will notice. For example, bad data could come from a malfunctioning sensor on a robot, or from someone spamming a search engine to try to rank high in search results. To reduce this risk, you need to monitor your system closely and promptly switch learning off (and possibly revert to a previously working state) "if you detect a drop in performance. You may also want to monitor the input data and react to abnormal data (e.g., using an anomaly detection algorithm)."Instance-Based Versus Model-Based Learning	One more way to categorize Machine Learning systems is by how they generalize. Most Machine Learning tasks are about making predictions. This means that given a number of training examples, the system needs to be able to make good predictions for (generalize to) examples it has never seen before. Having a good performance measure on the training data is good, but insufficient; the true goal is to perform well on new instances.	There are two main approaches to generalization: instance-based learning and model-based learning.			Instance-based learning		Possibly the most trivial form of learning is simply to learn by heart. If you were to create a spam filter this way, it would just flag all emails that are identical to emails that have already been flagged by users—not the worst solution, but certainly not the best.		Instead of just flagging emails that are identical to known spam emails, your spam filter could be programmed to also flag emails that are very similar to known spam emails. This requires a measure of similarity between two emails. A (very basic) similarity measure between two emails could be to count the number of words they have in common. The system would flag an email as spam if it has many words in common with a known spam email.		This is called instance-based learning: the system learns the examples by heart, then generalizes to new cases by using a SIMILARITY MEASURE to compare them to the learned examples (or a subset of them). For example, in Figure 1-15 the new instance would be classified as a triangle because the majority of the most similar instances belong to that class.	Model-based learning		Another way to generalize from a set of examples is to build a model of these examples and then use that model to make predictions. This is called model-based learning 		For example, suppose you want to know if money makes people happy, so you download the Better Life Index data from the OECD’s website and stats about gross domestic product (GDP) per capita from the IMF’s website. Then you join the tables and sort by GDP per capita. Table 1-1 shows an excerpt of what you get.		check figure 1.17 and table above it.		There does seem to be a trend here! Although the data is noisy (i.e., partly random), it looks like life satisfaction goes up more or less linearly as the country’s GDP per capita increases. So you decide to model life satisfaction as a linear function of GDP per capita. This step is called model selection: you selected a linear model of life satisfaction with just one attribute, GDP per capita		WARNING			Confusingly, the same word “model” can refer to a type of model (e.g., Linear Regression), to a fully specified model architecture (e.g., Linear Regression with one input and one output), or to the final trained model ready to be used for predictions (e.g., Linear Regression with one input and one output, using θ0 = 4.85 and θ1 = 4.91 × 10–5). Model selection consists in choosing the type of model and fully specifying its architecture. Training a model means running an algorithm to find the model parameters that will make it best fit the training data (and hopefully make good predictions on new data).We have covered a lot of ground so far: you now know what Machine Learning is really about, why it is useful, what some of the most common categories of ML systems are, and what a typical project workflow looks like. Now let’s look at what can go wrong in learning and prevent you from making accurate predictions.Main Challenges of Machine Learning	In short, since your main task is to select a learning algorithm and train it on some data, the two things that can go wrong are “bad algorithm” and “bad data.” .MOREOVER DATA AND ALGORITHM ARE THE ONLY DETERMINING FACTORS OF SUCESSFULL SOLUTION AN PROBLEM CAN HAVE.Let’s start with examples of bad data.	Insufficient Quantity of Training Data		For a toddler to learn what an apple is, all it takes is for you to point to an apple and say “apple” (possibly repeating this procedure a few times). Now the child is able to recognize apples in all sorts of colors and shapes. Genius.,		Machine Learning is not quite there yet; "it takes a lot of data for most Machine Learning algorithms to work properly. Even for very simple problems you typically need thousands of examples, and for complex problems such as image or speech recognition you may need millions of examples (unless you can reuse parts of an existing model).,"		THE UNREASONABLE EFFECTIVENESS OF DATA			IN A FAMOUS PAPER PUBLISHED IN 2001, MICROSOFT RESEARCHERS MICHELE BANKO AND ERIC BRILL SHOWED THAT VERY DIFFERENT MACHINE LEARNING ALGORITHMS, INCLUDING FAIRLY SIMPLE ONES, PERFORMED ALMOST IDENTICALLY WELL ON A COMPLEX PROBLEM OF NATURAL LANGUAGE DISAMBIGUATION8 ONCE THEY WERE GIVEN ENOUGH DATA (AS YOU CAN SEE IN FIGURE 1-20).			As the authors put it, “these results suggest that we may want to reconsider the trade-off between spending time and money on algorithm development versus spending it on corpus development.”			The idea that data matters more than algorithms for complex problems was further popularized by Peter Norvig et al. in a paper titled “The Unreasonable Effectiveness of Data”, published in 2009.10 It should be noted, however, that small- and medium-sized datasets are still very common, and it is not always easy or cheap to get extra training data⁠—so don’t abandon algorithms just yet.	Nonrepresentative Training Data:		refer example in book in chapter 1 of Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow, 2nd Edition		in short words- if the data that you trained the model on and the new data that you want the machine to generalize on(i.e, the same code will not work on the new data that have a lot of diversion from the training data)		By using a nonrepresentative training set, we trained a model that is unlikely to make accurate predictions, especially for very poor and very rich countries.		It is crucial to use a training set that is representative of the cases you want to generalize to. This is often harder than it sounds: if the sample is too small, you will have sampling noise (i.e., nonrepresentative data as a result of chance), but even very large samples can be nonrepresentative if the sampling method is flawed. This is called SAMPLING BIAS.(sampling is the process of taking a part of the dataset)		Perhaps the most famous example of sampling bias happened during the US presidential election in 1936, which pitted Landon against Roosevelt: the Literary Digest conducted a very large poll, sending mail to about 10 million people. It got 2.4 million answers, and predicted with high confidence that Landon would get 57% of the votes. Instead, Roosevelt won with 62% of the votes. The flaw was in the Literary Digest’s sampling method:		First, to obtain the addresses to send the polls to, the Literary Digest used telephone directories, lists of magazine subscribers, club membership lists, and the like. All of these lists tended to favor wealthier people, who were more likely to vote Republican (hence Landon).		Second, less than 25% of the people who were polled answered. Again this introduced a sampling bias, by potentially ruling out people who didn’t care much about politics, people who didn’t like the Literary Digest, and other key groups. This is a special type of sampling bias called NONRESPONSE BIAS.	Poor-Quality Data		Obviously, if your training data is full of errors, outliers, and noise (e.g., due to poor-quality measurements), it will make it harder for the system to detect the underlying patterns, so your system is less likely to perform well. It is often well worth the effort to spend time cleaning up your training data. The truth is, most data scientists spend a significant part of their time doing just that. The following are a couple of examples of when you’d want to clean up training data:			If some instances are clearly outliers, it may help to simply discard them or try to fix the errors manually.			If some instances are missing a few features (e.g., 5% of your customers did not specify their age), you must decide whether you want to ignore this attribute altogether, ignore these instances, fill in the missing values (e.g., with the median age), or train one model with the feature and one model without it.	Irrelevant Features		As the saying goes: garbage in, garbage out. Your system will only be capable of learning if the training data contains enough relevant features and not too many irrelevant ones. A critical part of the success of a Machine Learning project is coming up with a good set of features to train on. This process, called feature engineering, involves the following steps:			Feature selection (selecting the most useful features to train on among existing features)			Feature extraction (combining existing features to produce a more useful one⁠—as we saw earlier, dimensionality reduction algorithms can help)			Creating new features by gathering new data		Now that we have looked at many examples of bad data, let’s look at a couple of examples of bad algorithms	Overfitting the Training Data		Say you are visiting a foreign country and the taxi driver rips you off. You might be tempted to say that all taxi drivers in that country are thieves. Overgeneralizing is something that we humans do all too often, and unfortunately machines can fall into the same trap if we are not careful. In Machine Learning this is called overfitting: it means that the model performs 	well on the training data, but it does not generalize well		when a model understands the data and noise too well that it negatively impacts the perfomance of the model on new data				WARNING			Overfitting happens when the model is too complex relative to the amount and noisiness of the training data. Here are possible solutions:,			Simplify the model by selecting one with fewer parameters (e.g., a linear model rather than a high-degree polynomial model), by reducing the number of attributes in the training data, or by constraining the model.,			Gather more training data.,			Reduce the noise in the training data (e.g., fix data errors and remove outliers).,		Constraining a model to make it simpler and reduce the risk of overfitting is called regularization. For example, the linear model we defined earlier has two parameters, θ0 and θ1. This gives the learning algorithm two degrees of freedom to adapt the model to the training data: it can tweak both the height (θ0) and the slope (θ1) of the line. If we forced θ1 = 0, the algorithm would have only one degree of freedom and would have a much harder time fitting the data properly: all it could do is move the line up or down to get as close as possible to the training instances, so it would end up around the mean. A very simple model indeed! If we allow the algorithm to modify θ1 but we force it to keep it small, then the learning algorithm will effectively have somewhere in between one and two degrees of freedom. It will produce a model that’s simpler than one with two degrees of freedom, but more complex than one with just one. You want to find the right balance between fitting the training data perfectly and keeping the model simple enough to ensure that it will generalize well.		THE AMOUNT OF REGULARIZATION TO APPLY DURING LEARNING CAN BE CONTROLLED BY A HYPERPARAMETER. A HYPERPARAMETER IS A PARAMETER OF A LEARNING ALGORITHM (NOT OF THE MODEL). AS SUCH, IT IS NOT AFFECTED BY THE LEARNING ALGORITHM ITSELF; "it must be set prior to training and remains constant during training. If you set the regularization hyperparameter to a very large value, you will get an almost flat model (a slope close to zero); the learning algorithm will almost certainly not overfit the training data, but it will be less likely to find a good solution. Tuning hyperparameters is an important part of building a Machine Learning system" (you will see a detailed example in the next chapter).	Underfitting the Training Data		As you might guess, underfitting is the opposite of overfitting: IT OCCURS WHEN YOUR MODEL IS TOO SIMPLE TO LEARN THE UNDERLYING STRUCTURE OF THE DATA. For example, a linear model of life satisfaction is prone to underfit; REALITY IS JUST MORE COMPLEX THAN THE MODEL, SO ITS PREDICTIONS ARE BOUND TO BE INACCURATE, EVEN ON THE TRAINING EXAMPLES.,		Here are the main options for fixing this problem:,			Select a more powerful model, with more parameters.,			Feed better features to the learning algorithm (feature engineering).,			Reduce the constraints on the model (e.g., reduce the regularization hyperparameter).	Stepping Back		BY NOW YOU KNOW A LOT ABOUT MACHINE LEARNING. HOWEVER, WE WENT THROUGH SO MANY CONCEPTS THAT YOU MAY BE FEELING A LITTLE LOST, SO LET’S STEP BACK AND LOOK AT THE BIG PICTURE:,		Machine Learning is about making machines get better at some task by learning from data, instead of having to explicitly code rules.,		There are many different types of ML systems: supervised or not, batch or online, instance-based or model-based.,		In an ML project you gather data in a training set, and you feed the training set to a learning algorithm. If the algorithm is model-based, it tunes some parameters to fit the model to the training set (i.e., to make good predictions on the training set itself), and then hopefully it will be able to make good predictions on new cases as well. If the algorithm is instance-based, it just learns the examples by heart and generalizes to new instances by using a similarity measure to compare them to the learned instances.,		The system will not perform well if your training set is too small, or if the data is not representative, is noisy, or is polluted with irrelevant features (garbage in, garbage out). Lastly, your model needs to be neither too simple (in which case it will underfit) nor too complex (in which case it will overfit).	THERE’S JUST ONE LAST IMPORTANT TOPIC TO COVER: ONCE YOU HAVE TRAINED A MODEL, YOU DON’T WANT TO JUST “HOPE” IT GENERALIZES TO NEW CASES. YOU WANT TO EVALUATE IT AND FINE-TUNE IT IF NECESSARY. LET’S SEE HOW TO DO THAT.	